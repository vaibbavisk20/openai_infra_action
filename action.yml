name: 'Azure Infrastructure for Open AI powered Chat'
description: 'This action helps deploy Infrastructure to Azure that helps achieve a chat-completion experience powered by Open AI'
branding:
  icon: 'play-circle'
  color: 'blue'
inputs:
  client-id:
    description: 'Client id to log in to azure'
    required: true
  tenant-id:
    description: 'Tenant id to log in to azure'
    required: true
  subscription-id:
    description: 'Subscription id to be used with your az login'
    required: true
  location:
    description: 'Location to deploy resources to'
    required: true
  openai-location:
    description: 'Location to deploy OpenAI resources to'
    required: true
  principal-id:
    description: 'FIC Service Principal ID'
    required: true
  env-name:
    description: 'Name of environment where env values are set'
    required: true
  principal-name:
    description: 'FIC Service Principal Name'
    required: true
  documentintelligence-location:
    decsription: 'Location to deploy Document Intelligence resources to'
    required: true
  bring-your-own-data:
    description: 'Boolean to indicate if you are bringing your own data'
    required: false
  data-path:
    description: 'Path to data to be used to train the OpenAI model'
    required: false
  additional-args:
    description: 'Additional parameters to set in the azd environment'
    required: false

runs:
  using: 'composite'
  steps:
    - name: 'Checkout master'
      uses: actions/checkout@v3

    - name: 'az cli login'
      uses: azure/login@v2
      with:
        client-id: ${{ inputs.client-id }}
        tenant-id: ${{ inputs.tenant-id }}
        subscription-id: ${{ inputs.subscription-id }}
        enable-AzPSSession: true
          
    - name: 'Install azd'
      uses: Azure/setup-azd@v0.1.0

    - name: 'Install Nodejs'
      uses: actions/setup-node@v4
      with:
        node-version: 20

    - name: Az powershell
      uses: azure/powershell@v2
      env:
        BRING_YOUR_OWN_DATA: ${{ inputs.bring-your-own-data }}
        OPTIONAL_JSON: ${{ inputs.optional }}
      with:
        inlineScript: |
          # cd airepo
          dir
          mkdir orig-ai-repo
          cd orig-ai-repo
          # Existing script...
          if ($env:OPTIONAL_JSON) {
            $parsedJson = $env:OPTIONAL_JSON | ConvertFrom-Json
            Write-Output "Printing out JSON input:"
            foreach ($key in $parsedJson.PSObject.Properties.Name) {
              $value = $parsedJson.$key
              Write-Output "${{key}}: ${{value}}"
            }
          }
          # Retrieve the JSON environment variable
          $jsonString = $env:MY_JSON

          # Convert the JSON string to a PowerShell object
          $jsonObject = $jsonString | ConvertFrom-Json

          # Iterate over the JSON object
          foreach ($key in $jsonObject.PSObject.Properties.Name) {
              $value = $jsonObject.$key
              Write-Output "Key: $key, Value: $value"
          }
          # azd init -t azure-search-openai-demo --no-prompt -e ${{ inputs.env-name }}
          # azd auth login --client-id ${{ inputs.client-id }} --federated-credential-provider "github" --tenant-id ${{ inputs.tenant-id }}
          # Get-AzAccessToken -ResourceUrl "https://vault.azure.net"
          # azd env set AZURE_LOCATION ${{ inputs.location }}
          # azd env set AZURE_SUBSCRIPTION_ID ${{ inputs.subscription-id }}
          # azd env set AZURE_PRINCIPAL_ID ${{ inputs.principal-id }}
          # azd env set AZURE_PRINCIPAL_NAME ${{ inputs.principal-name }}  
          # azd env set AZURE_OPENAI_LOCATION ${{ inputs.openai-location }}
          # azd env set AZURE_DOCUMENTINTELLIGENCE_LOCATION ${{ inputs.documentintelligence-location }}
          # Get-AzContext -ListAvailable
          # azd env get-values
          # $bringYourOwnData = [System.Convert]::ToBoolean($env:BRING_YOUR_OWN_DATA)
          # if ($bringYourOwnData -eq $true) {
          #   Write-Output "The bring-your-own-data input is true."
          #   if (Test-Path data) {
          #     Remove-Item data -Recurse -Force
          #   }
          #   Copy-Item ../${{ inputs.data-path }} data -Recurse
          # }
          # azd up --no-prompt -e ${{ inputs.env-name }}
        azPSVersion: "latest"